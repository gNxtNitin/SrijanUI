﻿@using System.Security.Claims


@{
    ViewBag.Title = "Reset Password";
    Layout = "_DashboardLayout";
}
@{
    var role = Context.User.FindFirst("CustomerType")?.Value;
    var idreq = "";
    if(role == "CUSTOMER")
    {
        idreq = Context.User.FindFirst("CustomerId")?.Value;
    }
    else
    {
        idreq = Context.User.FindFirst("EmpId")?.Value;
    }
}

@section PageStyles {
    <link rel="stylesheet" href="~/app-assets/vendor/css/pages/page-auth.css">

}

@section PageScripts {
     <script src="~/js/RegexChangepassword.js"></script> 

}
<div class="row">
    <div class="col-md-12">
        <div class="card mb-6">
            <h5 class="card-header">Change Password</h5>
            <div class="card-body pt-1">
                <form id="userpasswordUpdate" asp-action="UpdatePassword" asp-controller="Auth" method="post">

                    <input type="hidden" name="userId" id="userId" value="@idreq" />

                    <div class="row">
                        <div class="mb-6 col-md-6 form-password-toggle">
                            <label class="form-label" for="Password">New Password</label>
                            <div class="input-group input-group-merge">
                                <input class="form-control"
                                       type="password"
                                       id="newPassword"
                                       name="Password"
                                       placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" />
                                <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                            </div>
                            
                        </div>

                        <div class="mb-6 col-md-6 form-password-toggle">
                            <label class="form-label" for="confirmPassword">Confirm New Password</label>
                            <div class="input-group input-group-merge">
                                <input class="form-control"
                                       type="password"
                                       name="confirmPassword"
                                       id="confirmPassword"
                                       placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" />
                                <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                            </div>
                        </div>
                    </div>
                    <h6 class="text-body">Password Requirements:</h6>
                    <ul class="ps-4 mb-0">
                        <li class="mb-4">Minimum 8 characters long - the more, the better</li>
                        <li class="mb-4">At least one lowercase character</li>
                        <li>At least one number, symbol, or whitespace character</li>
                    </ul>
                    <div class="mt-6">
                        <button type="submit" class="btn btn-primary me-3">Save changes</button>
                        <button type="reset" class="btn btn-label-secondary">Reset</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@* <script>
    document.addEventListener('DOMContentLoaded', function () {
        const formElement = document.getElementById('userpasswordUpdate');
        FormValidation.formValidation(
            document.getElementById('userpasswordUpdate'),
            {
                fields: {
                    Password: {
                        validators: {
                            notEmpty: {
                                message: 'Password is required'
                            },
                            regexp: {
                                regexp: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$/,
                                message: 'Password must include a letter, number, special character, and be at least 8 characters'
                            }
                        }
                    },
                    confirmPassword: {
                        validators: {
                            notEmpty: {
                                message: 'Confirm password is required'
                            },
                            identical: {
                                compare: function () {
                                    return document.getElementById('newPassword').value;
                                },
                                message: 'Passwords do not match'
                            }
                        }
                    }
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger(),
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                        rowSelector: '.row',
                        eleInvalidClass: 'is-invalid',
                        eleValidClass: 'is-valid'
                    }),
                    submitButton: new FormValidation.plugins.SubmitButton(),
                    autoFocus: new FormValidation.plugins.AutoFocus()
                },
                init: instance => {
                    instance.on('plugins.message.placed', function (e) {
                        if (e.element.parentElement.classList.contains('input-group')) {
                            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);
                        }
                    });
                    instance.on('core.form.valid', function () {
                        formElement.submit();
                    });
                }
            }
        );
    });
</script>
 *@
<script>
    $(document).ready(function () {
        ToastWrapper.init({
            positionClass: 'toast-top-right',
            timeOut: 3000,
            progressBar:true

        });
        // Handle form submission
        var erCode = '@ViewBag.ErCode';
        var erMsg = '@ViewBag.ErMsg';
        console.log(erCode);
        console.log(erMsg);
        if ((erCode != null && erMsg != null) && (erCode != '' && erMsg != '')) {
            // Display error message
            if (erCode == "1") {
                ToastWrapper.success(erMsg);
            } else {
                ToastWrapper.error(erMsg);
            }

        }
    });
</script>